write.csv(dataShape_ProT,"../../data/trial1/dataShape_ProT.csv", row.names = FALSE)
### Save HelT Shape features
p_Roll = data.frame(pos$Roll, target = 'peak')
n_Roll = data.frame(neg$Roll, target = 'no-peak')
dataShape_Roll = rbind(p_Roll,n_Roll)
dataShape_Roll = dataShape_Roll[,colSums(is.na(dataShape_Roll))<nrow(dataShape_Roll)]
write.csv(dataShape_Roll,"../../data/trial1/dataShape_Roll.csv", row.names = FALSE)
### Save HelT Shape features
p_EP = data.frame(pos$EP, target = 'peak')
n_EP = data.frame(neg$EP, target = 'no-peak')
dataShape_EP = rbind(p_EP,n_EP)
dataShape_EP = dataShape_EP[,colSums(is.na(dataShape_EP))<nrow(dataShape_EP)]
write.csv(dataShape_EP,"../../data/trial1/dataShape_EP.csv", row.names = FALSE)
# Generation of sequence features
source('adn_descriptors.r')
faPos = readFASTA(outPositives)
faNeg = readFASTA(outNegatives)
### Save monomers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_1(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_1(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_1 = rbind(pos, neg)
dataSequence_1 = dataSequence_1[, colSums(dataSequence_1 != 0) > 0]
write.csv(dataSequence_1,"../../data/trial1/dataSequence_1.csv", row.names = FALSE)
### Save dimers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_2(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_2(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_2 = rbind(pos, neg)
dataSequence_2 = dataSequence_2[, colSums(dataSequence_2 != 0) > 0]
write.csv(dataSequence_2,"../../data/trial1/dataSequence_2.csv", row.names = FALSE)
### Save triamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_3(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_3(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_3 = rbind(pos, neg)
dataSequence_3 = dataSequence_3[, colSums(dataSequence_3 != 0) > 0]
write.csv(dataSequence_3,"../../data/trial1/dataSequence_3.csv", row.names = FALSE)
### Save tetramers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_4(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_4(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_4 = rbind(pos, neg)
dataSequence_4 = dataSequence_4[, colSums(dataSequence_4 != 0) > 0]
write.csv(dataSequence_4,"../../data/trial1/dataSequence_4.csv", row.names = FALSE)
### Save pentamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_5(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_5(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_5 = rbind(pos, neg)
dataSequence_5 = dataSequence_5[, colSums(dataSequence_5 != 0) > 0]
write.csv(dataSequence_5,"../../data/trial1/dataSequence_5.csv", row.names = FALSE)
### Save hexamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_6(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_6(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_6 = rbind(pos, neg)
dataSequence_6 = dataSequence_6[, colSums(dataSequence_6 != 0) > 0]
write.csv(dataSequence_6,"../../data/trial1/dataSequence_6.csv", row.names = FALSE)
### Save heptamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_7(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_7(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_7 = rbind(pos, neg)
dataSequence_7 = dataSequence_7[, colSums(dataSequence_7 != 0) > 0]
write.csv(dataSequence_7,"../../data/trial1/dataSequence_7.csv", row.names = FALSE)
### Save octamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_8(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_8(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_8 = rbind(pos, neg)
dataSequence_8 = dataSequence_8[, colSums(dataSequence_8 != 0) > 0]
write.csv(dataSequence_8,"../../data/trial1/dataSequence_8.csv", row.names = FALSE)
# QSAR Models with DNA
require(DNAshapeR)
require(seqinr)
require(RBioinf)
library(rDNAse)
# Load Data
# =====================================
## Load positive data
#dirData = "D:/Users/Sara/Documents/2019-21 M치ster Bioinform치tica/2021 Febrero/TFM/Programacion/Git/src/modelling_design"
#setwd(dirData)
inFile = '../../data/trial1/peaks_data_generated.txt'
outPositives = '../../data/trial1/peaks_positive.fa'
seqs = read.delim2(inFile, sep = '\t', header = F)
seqs = as.list(seqs$V1)
## Save fasta with positive cases
write.fasta(seqs, names = paste0('positive', seq(1:length(seqs))), file.out = outPositives)
## Generate negative data randomly
outNegatives = '../../data/trial1/peaks_negatives.fa'
len = list()
for (i in seq_along(seqs)) {
len[[i]] = nchar(seqs[[i]])
}
md = median(unlist(len))
set.seed(1995)
rdm = list()
for (j in seq_along(seqs)) {
rdm[[j]] = randDNA(md)
}
## Save fasta with negative cases
write.fasta(rdm, names = paste0('negatives', seq(1:length(rdm))), file.out = outNegatives)
QSAR Models with DNA
require(DNAshapeR)
require(seqinr)
require(RBioinf)
library(rDNAse)
# Load Data
# =====================================
## Load positive data
#dirData = "D:/Users/Sara/Documents/2019-21 M치ster Bioinform치tica/2021 Febrero/TFM/Programacion/Git/src/modelling_design"
#setwd(dirData)
inFile = '../../data/trial1/peaks_data_generated.txt'
outPositives = '../../data/trial1/peaks_positive.fa'
seqs = read.delim2(inFile, sep = '\t', header = F)
seqs = as.list(seqs$V1)
## Save fasta with positive cases
write.fasta(seqs, names = paste0('positive', seq(1:length(seqs))), file.out = outPositives)
## Generate negative data randomly
outNegatives = '../../data/trial1/peaks_negatives.fa'
len = list()
for (i in seq_along(seqs)) {
len[[i]] = nchar(seqs[[i]])
}
md = median(unlist(len))
set.seed(1995)
rdm = list()
for (j in seq_along(seqs)) {
rdm[[j]] = randDNA(md)
}
## Save fasta with negative cases
write.fasta(rdm, names = paste0('negatives', seq(1:length(rdm))), file.out = outNegatives)
pos = getShape(outPositives)
neg = getShape(outNegatives)
cbind(outPositives,outNegatives)
outPositives
Generation of shape features and save them in fasta files
pos = getShape(outPositives)
neg = getShape(outNegatives)
dataShape = cbind(outPositives,outNegatives)
# Generation of sequence features
source('adn_descriptors.r')
faPos = readFASTA(outPositives)
faNeg = readFASTA(outNegatives)
### Save monomers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_1(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_1(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_1 = rbind(pos, neg)
dataSequence_1 = dataSequence_1[, colSums(dataSequence_1 != 0) > 0]
write.csv(dataSequence_1,"../../data/trial1/dataSequence_1.csv", row.names = FALSE)
### Save dimers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_2(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_2(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_2 = rbind(pos, neg)
dataSequence_2 = dataSequence_2[, colSums(dataSequence_2 != 0) > 0]
write.csv(dataSequence_2,"../../data/trial1/dataSequence_2.csv", row.names = FALSE)
### Save triamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_3(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_3(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_3 = rbind(pos, neg)
dataSequence_3 = dataSequence_3[, colSums(dataSequence_3 != 0) > 0]
write.csv(dataSequence_3,"../../data/trial1/dataSequence_3.csv", row.names = FALSE)
### Save tetramers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_4(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_4(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_4 = rbind(pos, neg)
dataSequence_4 = dataSequence_4[, colSums(dataSequence_4 != 0) > 0]
write.csv(dataSequence_4,"../../data/trial1/dataSequence_4.csv", row.names = FALSE)
### Save pentamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_5(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_5(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_5 = rbind(pos, neg)
dataSequence_5 = dataSequence_5[, colSums(dataSequence_5 != 0) > 0]
write.csv(dataSequence_5,"../../data/trial1/dataSequence_5.csv", row.names = FALSE)
### Save hexamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_6(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_6(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_6 = rbind(pos, neg)
dataSequence_6 = dataSequence_6[, colSums(dataSequence_6 != 0) > 0]
write.csv(dataSequence_6,"../../data/trial1/dataSequence_6.csv", row.names = FALSE)
### Save heptamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_7(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_7(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_7 = rbind(pos, neg)
dataSequence_7 = dataSequence_7[, colSums(dataSequence_7 != 0) > 0]
write.csv(dataSequence_7,"../../data/trial1/dataSequence_7.csv", row.names = FALSE)
### Save octamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_8(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_8(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_8 = rbind(pos, neg)
dataSequence_8 = dataSequence_8[, colSums(dataSequence_8 != 0) > 0]
write.csv(dataSequence_8,"../../data/trial1/dataSequence_8.csv", row.names = FALSE)
faNeg
dataShape
seq
seq
seqs
rbind(seqs,rdm)
cbind(seqs,rdm)
seqs
dataSequence_1
dataSequence_2
# QSAR Models with DNA
require(DNAshapeR)
require(seqinr)
require(RBioinf)
library(rDNAse)
inFile = '../../data/trial1/peaks_data_generated.txt'
outPositives = '../../data/trial1/peaks_positive.fa'
seqs = read.delim2(inFile, sep = '\t', header = F)
seqs = as.list(seqs$V1)
inFile = '../../data/trial1/peaks_data_generated.txt'
outPositives = '../../data/trial1/peaks_positive.fa'
seqs = read.delim2(inFile, sep = '\t', header = F)
seqs = as.list(seqs$V1)
## Save fasta with positive cases
write.fasta(seqs, names = paste0('positive', seq(1:length(seqs))), file.out = outPositives)
## Generate negative data randomly
outNegatives = '../../data/trial1/peaks_negatives.fa'
len = list()
for (i in seq_along(seqs)) {
len[[i]] = nchar(seqs[[i]])
}
md = median(unlist(len))
set.seed(1995)
rdm = list()
for (j in seq_along(seqs)) {
rdm[[j]] = randDNA(md)
}
## Save fasta with negative cases
write.fasta(rdm, names = paste0('negatives', seq(1:length(rdm))), file.out = outNegatives)
# Generate descriptors
# ===================================
## Generation of shape features and save them in fasta files
pos = getShape(outPositives)
neg = getShape(outNegatives)
# Generation of sequence features
source('adn_descriptors.r')
faPos = readFASTA(outPositives)
faNeg = readFASTA(outNegatives)
### Save monomers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_1(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_1(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_1 = rbind(pos, neg)
dataSequence_1 = dataSequence_1[, colSums(dataSequence_1 != 0) > 0]
write.csv(dataSequence_1,"../../data/trial1/dataSequence_1.csv", row.names = FALSE)
### Save dimers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_2(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_2(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_2 = rbind(pos, neg)
dataSequence_2 = dataSequence_2[, colSums(dataSequence_2 != 0) > 0]
write.csv(dataSequence_2,"../../data/trial1/dataSequence_2.csv", row.names = FALSE)
### Save triamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_3(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_3(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_3 = rbind(pos, neg)
dataSequence_3 = dataSequence_3[, colSums(dataSequence_3 != 0) > 0]
write.csv(dataSequence_3,"../../data/trial1/dataSequence_3.csv", row.names = FALSE)
### Save tetramers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_4(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_4(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_4 = rbind(pos, neg)
dataSequence_4 = dataSequence_4[, colSums(dataSequence_4 != 0) > 0]
write.csv(dataSequence_4,"../../data/trial1/dataSequence_4.csv", row.names = FALSE)
### Save pentamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_5(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_5(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_5 = rbind(pos, neg)
dataSequence_5 = dataSequence_5[, colSums(dataSequence_5 != 0) > 0]
write.csv(dataSequence_5,"../../data/trial1/dataSequence_5.csv", row.names = FALSE)
### Save hexamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_6(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_6(x))))
pos = data.frame(pos, target = 'peak')
dataSequence_6 = rbind(pos, neg)
dataSequence_6 = dataSequence_6[, colSums(dataSequence_6 != 0) > 0]
neg = data.frame(neg, target = 'no-peak')
write.csv(dataSequence_6,"../../data/trial1/dataSequence_6.csv", row.names = FALSE)
### Save heptamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_7(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_7(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_7 = rbind(pos, neg)
dataSequence_7 = dataSequence_7[, colSums(dataSequence_7 != 0) > 0]
write.csv(dataSequence_7,"../../data/trial1/dataSequence_7.csv", row.names = FALSE)
### Save octamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_8(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_8(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_8 = dataSequence_8[, colSums(dataSequence_8 != 0) > 0]
dataSequence_8 = rbind(pos, neg)
write.csv(dataSequence_8,"../../data/trial1/dataSequence_8.csv", row.names = FALSE)
### Save octamers' features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) prob_8(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) prob_8(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence_8 = rbind(pos, neg)
dataSequence_8 = dataSequence_8[, colSums(dataSequence_8 != 0) > 0]
write.csv(dataSequence_8,"../../data/trial1/dataSequence_8.csv", row.names = FALSE)
trackShape(outPositives, pos)
plotShape(pos$MGW)
# Generate descriptors
# ===================================
## Generation of shape features and save them in fasta files
pos = getShape(outPositives)
neg = getShape(outNegatives)
trackShape(outPositives, pos)
plotShape(pos$MGW)
install.packages(fields)
BiocManager::install(fields)
library(fields)
heatShape(pos$ProT, 20)
length(pos)
length(pos$MGW)
heatShape(pos$ProT,16)
pos$MGW
pos$MGW[1]
pos$MGW[1:]
pos$MGW[1:,]
pos$MGW[:,]
pos$MGW[,:]
pos$MGW["1"]
pos$MGW["2"]
pos$MGW[1,:]
pos$MGW[1,]
pos[1]
outPositives[1]
featureType <- c("1-mer", "1-shape")
featureVector <- encodeSeqShape(outPositives, pos, featureType)
head(featureVector)
featureType <- c("3-mer", "1-shape")
featureVector <- encodeSeqShape(outPositives, pos, featureType)
head(featureVector)
featureType <- c("2-mer", "1-shape")
featureVector <- encodeSeqShape(outPositives, pos, featureType)
head(featureVector)
length(featureVector)
seqs
rdm
paste0('positives', seq(1:length(seqs)))
paste0('positives', seq(1:length(seqs)),("negatives",1))
paste0('positives', seq(1:length(seqs)),("negatives",seq(1:2)))
paste0('positives', seq(1:length(seqs)),paste0("negatives",seq(1:2)))
c(paste0('positives', seq(1:length(seqs))),paste0('negatives', seq(1:length(rdm))))
list_names <- c(paste0('positives', seq(1:length(seqs))),paste0('negatives', seq(1:length(rdm))))
write.fasta(c(seqs,rdm), names = list_names, file.out = outUnified)
outUnified = '../../data/trial1/peaks_unified.fa'
list_names <- c(paste0('positives', seq(1:length(seqs))),paste0('negatives', seq(1:length(rdm))))
write.fasta(c(seqs,rdm), names = list_names, file.out = outUnified)
unified = getShape(outUnified)
featureType <- c("2-mer", "1-shape")
featureVector <- encodeSeqShape(outUnified, unified, featureType)
head(featureVector)
install.packages("rjson")
library(rjson)
json <- fromJSON(file = '../../config/data.json')
json
("%s" % "hi")
print("%s" % "hi")
print("%s" % 34)
print("%s" % hi)
print("%s" % "hi")
print("%s, I'm Sara" % "hi")
print("%s, I'm Sara" % ("hi"))
print("%d, I'm Sara" % 3
print("%d, I'm Sara" % 3)
sprintf("%s" % "hi")
sprintf("%s","hi")
sprintf("%s-cosa","hi")
sprintf("prueba%s-cosa","hi")
sprintf("%d-cosa",6)
json
json$`Nucleotids in a row`
json <- fromJSON(file = '../../config/data.json')
featureType <- c(sprintf("%d-mer",json$`Nucleotids in a row`), "1-shape")
featureVector <- encodeSeqShape(outUnified, unified, featureType)
head(featureVector)
# QSAR Models with DNA
require(DNAshapeR)
require(seqinr)
require(RBioinf)
library(rDNAse)
inFile = '../../data/trial1/peaks_data_generated.txt'
outPositives = '../../data/trial1/peaks_positive.fa'
seqs = as.list(seqs$V1)
## Save fasta with positive cases
write.fasta(seqs, names = paste0('positive', seq(1:length(seqs))), file.out = outPositives)
seqs = read.delim2(inFile, sep = '\t', header = F)
seqs = read.delim2(inFile, sep = '\t', header = F)
seqs = as.list(seqs$V1)
## Save fasta with positive cases
write.fasta(seqs, names = paste0('positive', seq(1:length(seqs))), file.out = outPositives)
## Generate negative data randomly
outNegatives = '../../data/trial1/peaks_negatives.fa'
len = list()
for (i in seq_along(seqs)) {
len[[i]] = nchar(seqs[[i]])
}
md = median(unlist(len))
set.seed(1995)
rdm = list()
for (j in seq_along(seqs)) {
rdm[[j]] = randDNA(md)
}
## Save fasta with negative cases
write.fasta(rdm, names = paste0('negatives', seq(1:length(rdm))), file.out = outNegatives)
## Unify positive + negative cases in a fasta file
outUnified = '../../data/trial1/peaks_unified.fa'
list_names <- c(paste0('positives', seq(1:length(seqs))),paste0('negatives', seq(1:length(rdm))))
write.fasta(c(seqs,rdm), names = list_names, file.out = outUnified)
# Generate descriptors
# ===================================
## Generation of shape features and save them in fasta files
pos = getShape(outPositives)
neg = getShape(outNegatives)
unified = getShape(outUnified)
plotShape(pos$MGW)
library(fields)
heatShape(pos$ProT,16)
## Generation of sequence and shape features combined
library(Biostrings)
library(rjson)
json <- fromJSON(file = '../../config/data.json')
featureType <- c(sprintf("%d-mer",json$`Nucleotids in a row`), "1-shape")
featureVector <- encodeSeqShape(outUnified, unified, featureType)
featureVector <- encodeSeqShape(outUnified, unified, featureType)
featureType <- c(sprintf("%d-mer",json$`Nucleotids in a row`), "1-shape")
featureVector <- encodeSeqShape(outUnified, unified, featureType)
#featureType <- c(sprintf("%d-mer",json$`Nucleotids in a row`), "1-shape")
featureType <- c("2-mer", "1-shape")
featureVector <- encodeSeqShape(outUnified, unified, featureType)
head(featureVector)
write.csv(sprintf("featureVector_%d",json$`Nucleotids in a row`),sprintf("../../data/trial1/featureVector_%d.csv",json$`Nucleotids in a row`), row.names = FALSE)
# Generation of sequence features
source('adn_descriptors.r')
faPos = readFASTA(outPositives)
faNeg = readFASTA(outNegatives)
### Save octamers (or what has been set up in the json file) features
pos = as.data.frame(t(sapply(unlist(faPos), function(x) sprintf("prob_%d(x)",json$`Nucleotids in a row`))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) sprintf("prob_%d(x)",json$`Nucleotids in a row`))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence = rbind(pos, neg)
pos
neg
faPos
json$`Nucleotids in a row`
sprintf("prob_%d",json$`Nucleotids in a row`)
sprintf("prob_%d",json$`Nucleotids in a row`)
number_mers
number_mers <- sprintf("prob_%d",json$`Nucleotids in a row`)
number_mers
pos = as.data.frame(t(sapply(unlist(faPos), function(x) number_mers(x))))
pos
get(number_mers)
pos = as.data.frame(t(sapply(unlist(faPos), function(x) get(number_mers)(x))))
pos
pos[1:5,1:5]
number_mers <- sprintf("prob_%d",json$`Nucleotids in a row`)
pos = as.data.frame(t(sapply(unlist(faPos), function(x) get(number_mers)(x))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) get(number_mers)(x)))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence = rbind(pos, neg)
dataSequence = dataSequence[, colSums(dataSequence != 0) > 0]
write.csv(dataSequence,sprintf("../../data/trial1/dataSequence_%d.csv",json$`Nucleotids in a row`), row.names = FALSE)
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) get(number_mers)(x)))))
neg = as.data.frame(t(sapply(unlist(faNeg), function(x) get(number_mers)(x))))
pos = data.frame(pos, target = 'peak')
neg = data.frame(neg, target = 'no-peak')
dataSequence = rbind(pos, neg)
ls
clear
clc
