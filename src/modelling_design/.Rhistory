summary(lm(abs(residuals(inv_pipe))~fitted(inv_pipe)))
summary(lm(abs(residuals(sq_pipe))~fitted(sq_pipe)))
sq_pipe <- lm(sqrt(Lab)~sqrt(Field),pipeline)
summary(sq_pipe)
summary(lm(abs(residuals(sq_pipe))~fitted(sq_pipe)))
head(divusa)
modelo_divusa <- lm(divorce~unemployed+femlab+marriage+birth+military,divusa)
summary(modelo_divusa)
cor(residuals(modelo_divusa)[-length(residuals(modelo_divusa))],residuals(modelo_divusa)[-1])
plot(residuals(modelo_divusa)[-length(residuals(modelo_divusa))],residuals(modelo_divusa)[-1], main = "correlación de errores")
install.packages(nlme)
install.packages("nlme")
install.packages("nlme")
library(nlme)
modelo_divusa_gls <- gls(divorce~unemployed+femlab+marriage+birth+military, method="ML",correlation=corAR1(form=~year), data=divusa)
summary(modelo_divusa_gls)
library(faraway)
modelo_divusa_gls <- gls(divorce~unemployed+femlab+marriage+birth+military, method="ML",correlation=corAR1(form=~year), data=divusa)
summary(modelo_divusa_gls)
intervals(modelo_divusa_gls,which="var-cov")
summary(modelo_divusa)
divusa?
?divusa
head(salmonella)
modelo_sal <- lm(colonies~I(log(dose+1)),salmonella)
summary(modelo_sal)
modelo_sal <- lm(colonies~log(dose+1),salmonella)
summary(modelo_sal)
plot(colonies~log(dose+1),salmonella,xlab="log(dosis+1)",ylab="Colonias",main="Transfomación salmonella")
abline(modelo_sal)
abline(coef(modelo_sal),col=3)
abline(modelo_sal,col="red")
modelo_salf <- lm(colonies~factor(log(dose+1)),salmonella)
anova(modelo_sal,modelo_salf)
head(stack.loss)
head(stackloss)
modelo_stack <- lm(stack.loss~.,stackloss)
summary(modelo_stack)
install.packages("Blossom ")
install.packages("quantreg")
library(quantreg)
modelo_stack_lad <- rq(stack.loss~.,stackloss)
summary(modelo_stack_lad)
modelo_stack_lad <- rq(stack.loss~.,data=stackloss)
summary(modelo_stack_lad)
library(MASS)
modelo_stack_hub <- rlm(stack.loss~.,data=stackloss)
summary(modelo_stack_hub)
modelo_stack_lts <- ltsreg(stack.loss~.,stackloss,nsamp="exact")
coef(modelo_stack_lts)
summary(modelo_stack)
summary(modelo_stack_lad)
summary(modelo_stack_hub)
coef(modelo_stack_lts)
library(car)
outlier.test(modelo_stack)
outlierTest(modelo_stack)
plot(modelo_stack)
which(cooks.distance(mc)>corte)
plot(modelo_stack)
which(cooks.distance(modelo_stack)>corte)
corte <- 4/((nrow(stackloss)-length(modelo_stack$coefficients)-2))
corte
plot(modelo_stack)
leverage.plot(modelo_stack)
leveragePlot(modelo_stack)
leveragePlot(modelo_stack)
leveragePlots(modelo_stack)
plot(modelo_stack,which = 5)
plot(modelo_stack,which = 5)
cooks.distance(modelo_stack)
corte <- 4/((nrow(stackloss)-length(modelo_stack$coefficients)-2))
plot(modelo_stack)
par(pty="s")
plot(mc, which=5)
par(pty="s")
plot(modelo_stack, which=5)
plot(modelo_stack,which = 5)
cooks.distance(modelo_stack)
corte <- 4/((nrow(stackloss)-length(modelo_stack$coefficients)-2))
plot(modelo_stack,which=4)
abline(h=corte,col="red")
which(cooks.distance(modelo_stack)>corte)
modelo_stack21 <- lm(stack.loss~.,data=stackloss[-21,])
summary(modelo_stack21)
head(crawl)
modelo_crawl <- lm(crawling~.,crawl)
summary(modelo_crawl)
plot(modelo_crawl)
modelo_crawl <- lm(crawling~age,crawl)
summary(modelo_crawl)
plot(modelo_crawl)
modelo_crawl <- lm(crawling~age,crawl)
summary(modelo_crawl)
plot(crawling~age,crawl)
crawl
modelo_crawl <- lm(crawling~SD,crawl)
summary(modelo_crawl)
plot(crawling~SD,crawl)
?crawl
modelo_crawl <- lm(n~crawling,crawl)
summary(modelo_crawl)
plot(n~crawling,crawl)
?crawl
modelo_crawl <- lm(crawling~SD,crawl)
summary(modelo_crawl)
plot(crawling~SD,crawl)
modelo_crawl <- lm(SD~crawling,crawl)
summary(modelo_crawl)
plot(SD~crawling,crawl)
modelo_crawl <- lm(crawling~temperature,crawl)
summary(modelo_crawl)
plot(crawling~temperature,crawl)
modelo_crawl <- lm(temperature~crawling,crawl)
summary(modelo_crawl)
plot(temperature~crawling,crawl)
cor(crawl$n,crawl$SD)
cormodelo_crawl <- lm(crawling~temperature,crawl)
summary(modelo_crawl)
plot(crawling~temperature,crawl)(crawl$n,crawl$SD)
modelo_crawl <- lm(crawling~temperature,crawl)
summary(modelo_crawl)
plot(crawling~temperature,crawl)
gls(crawling~.,data = "crawl",method = "ML",correlation = corAR1(form = ~SD))
gls(crawling~temperature,data = "crawl",method = "ML",correlation = corAR1(form = ~SD))
crawl
plot(SD~n,crawl)
plot(n~SD,crawl)
plot(SD~n,crawl)
?crawl
modelo_crawl2 <- lm(crawling ~ temperature, data = crawl, weights = 1/n)
sumary(modelo_crawl2)
modelo_crawl2 <- lm(crawling ~ temperature, data = crawl, weights = 1/n)
sumary(modelo_crawl)
modelo_crawl3 <- lm(crawling ~ temperature, data = crawl, weights = 1/(sd^2))
sumary(modelo_crawl3)
modelo_crawl3 <- lm(crawling ~ temperature, data = crawl, weights = 1/(SD^2))
sumary(modelo_crawl3)
sumary(modelo_crawl2)
sumary(modelo_crawl)
head(fat)
fat
head(fat)
data(fat,package="faraway")
modelo_fat <- lm(brozek~age+weight+height+neck+chest+abdom+hip+thigh+knee+ankle+biceps+forearm+wrist,fat)
sumary(modelo_fat)
modelo_fat_hub <- rlm(brozek~age+weight+height+neck+chest+abdom+hip+thigh+knee+ankle+biceps+forearm+wrist,fat)
sumary(modelo_fat_hub)
modelo_fat <- lm(brozek~age+weight+height+neck+chest+abdom+hip+thigh+knee+ankle+biceps+forearm+wrist,fat)
summary(modelo_fat)
modelo_fat_hub <- rlm(brozek~age+weight+height+neck+chest+abdom+hip+thigh+knee+ankle+biceps+forearm+wrist,fat)
summary(modelo_fat_hub)
anova(modelo_fat,modelo_fat_hub)
modelo_fat_hub$w
pesos_hub <- modelo_fat_hub$w
names(pesos_hub) <- row.names(fat)
sort(pesos_hub)[1:2]
outlierTest(modelo_fat_hub)
cooks.distance(modelo_fat_hub)
corte <- 4/((nrow(modelo_fat_hub$brokez)-length(modelo_fat_hub$coefficients)-2))
plot(modelo_fat_hub,which=4)
abline(h=corte,col="red")
which(cooks.distance(modelo_fat_hub)>corte)
corte <- 4/((nrow(modelo_fat_hub$brokez)-length(modelo_fat_hub$coefficients)-2))
corte
corte <- 4/((nrow(modelo_fat_hub)-length(modelo_fat_hub$coefficients)-2))
corte
corte <- 4/((nrow(fat$brozek)-length(modelo_fat_hub$coefficients)-2))
corte
nrow(fat$brozek)
fat$brozek
length(modelo_fat$coefficients)
length(fat$brozek)
cooks.distance(modelo_fat_hub)
corte <- 4/((length(fat$brozek)-length(modelo_fat_hub$coefficients)-2))
plot(modelo_fat_hub,which=4)
abline(h=corte,col="red")
which(cooks.distance(modelo_fat_hub)>corte)
cooks.distance(modelo_fat_hub)
corte <- 4/((length(fat$brozek)-length(modelo_fat_hub$coefficients)-2))
plot(modelo_fat_hub,which=4)
abline(h=corte,col="red")
corte <- 4/((length(fat$brozek)-length(modelo_fat_hub$coefficients)-2))
plot(modelo_fat_hub,which=4)
abline(h=corte,col="red")
outlierTest(modelo_fat_hub)
fat
head(fat)
plot(height,weight,data=fat,xlab="altura",ylab="peso")
plot(height,weight,data="fat",xlab="altura",ylab="peso")
plot(fat$height,fat$weight,xlab="Altura",ylab="Peso")
modelo_fat_2 <- lm(weight~height,fat)
outlierTest(modelo_fat_2)
abline(modelo_fat_2)
abline(modelo_fat_2,col="red")
head(aatemp)
plot(aatemp$year,aatemp$temp,xlab="Año",ylab="Temperatura")
plot(aatemp$year,aatemp$temp,xlab="Año",ylab="Temperatura")
abline(lm(temp~year,aatemp),c="red")
plot(aatemp$year,aatemp$temp,xlab="Año",ylab="Temperatura")
abline(lm(temp~year,aatemp),col="red")
modelo_aat <- gls(temp~year, correlation=corAR1(form=~year), data=aatemp)
summary(modelo_aat)
modelo_aat_10 <- lm(temp~poly(year,10),aatemp)
summary(modelo_aat_10)
summary(modelo_aat_10)$coef[11,4]
aatemp$year
modelo_aat_5 <- lm(temp~poly(year,5),aatemp)
matplot(year,cbind(temp,modelo_aat_5$fit),type="pl",ylab="Temperatura",pch=20,lty=1,,col=1, xlab="Año")
modelo_aat_5 <- lm(temp~poly(year,5),aatemp)
matplot(aatemp$year,cbind(aatemp$temp,modelo_aat_5$fit),type="pl",ylab="Temperatura",pch=20,lty=1,,col=1, xlab="Año")
modelo_aat_5$fit
modelo_aat_5$coefficients
modelo_aat_5$fitted
modelo_aat_5 <- lm(temp~poly(year,5),aatemp)
matplot(aatemp$year,cbind(aatemp$temp,modelo_aat_5$fitted.values),type="pl",ylab="Temperatura",pch=20,lty=1,,col=1, xlab="Año")
predict(modelo_aat_5,data.frame(year=2020),interval="prediction")
hasta1930 <- function(x) ifelse(x < 1930, 1930 - x, 0)
tras1930 <- function(x) ifelse(x >= 1930, 0, x - 1930)
lmod <- lm(temp ~ hasta1930(year) + tras1930(year), aatemp)
x <- seq(1850, 2000, by=1)
py <- lmod$coef[1] + lmod$coef[2]*hasta1930(x)
plot(temp ~ year, aatemp)
abline(v=1930, lty = 5)
lines(x, py, lty=2)
lmod$coef[3]
lmod$coef[2]
lmod$coef[1]
hasta1930 <- function(x) ifelse(x < 1930, 1930 - x, 0)
tras1930 <- function(x) ifelse(x <= 1930, 0, x - 1930)
lmod <- lm(temp ~ hasta1930(year) + tras1930(year), aatemp)
x <- seq(1850, 2000, by=1)
py <- lmod$coef[1] + lmod$coef[2]*hasta1930(x)
plot(temp ~ year, aatemp)
abline(v=1930, lty = 5)
lines(x, py, lty=2)
hasta1930 <- function(x) ifelse(x < 1930, 1930 - x, 0)
tras1930 <- function(x) ifelse(x >= 1930, 0, x - 1930)
lmod <- lm(temp ~ hasta1930(year) + tras1930(year), aatemp)
x <- seq(1850, 2000, by=1)
py <- lmod$coef[1] + lmod$coef[2]*hasta1930(x)
plot(temp ~ year, aatemp)
abline(v=1930, lty = 5)
lines(x, py, lty=2)
left30 <- function(x) ifelse(x < 1930, 1930 - x, 0)
right30 <- function(x) ifelse(x >= 1930, 0, x - 1930)
#Fit the model
stickMod <- lm(temp ~ left30(year) + right30(year), aatemp)
#Plot the model
x <- seq(1850, 2000, by=1)
predy <- stickMod$coef[1] + stickMod$coef[2]*left30(x)
plot(temp ~ year, aatemp)
abline(v=1930, lty = 5)
lines(x, predy, lty=2)
hasta1930 <- function(x) ifelse(x < 1930, 1930 - x, 0)
tras1930 <- function(x) ifelse(x >= 1930, 0, x - 1930)
lmod <- lm(temp ~ hasta1930(year) + tras1930(year), aatemp)
x <- seq(1850, 2000, by=1)
py <- lmod$coef[1] + lmod$coef[2]*hasta1930(x)
plot(temp ~ year, aatemp)
abline(v=1930, lty = 5)
lines(x, py, lty=2)
lmod
library(faraway)
head(prostate)
modelo_pros <- lm(lpsa ~ ., data="protate")
modelo_pros <- lm(lpsa ~., data=prostate
)
modelo_pros
summary(modelo_pros)
reaccion_mutante <- c(93,81,73,64,73,68,64,65,50,68,57,50,62,44,54,56,50,42,42,29)
reaccion_nomutan <- c(96,100,92,96,92,92,84,96,91,82,86,82,91,85,83,70,74,64,68,78)
reacciones <- c(93,81,73,64,73,68,64,65,50,68,57,50,62,44,54,56,50,42,42,29,96,100,92,96,92,92,84,96,91,82,86,82,91,85,83,70,74,64,68,78)
pulsos <- c(rep(1:20,2))
tipo <- c(rep(1,20),rep(0,20))
dataset_gusanos <- cbind(reacciones,pulsos,tipo)
dataset_gusanos <- as.data.frame(dataset_gusanos)
permutacion_test <- independence_test(reacciones~tipo,data = dataset_gusanos)
permutation_test
library(lmtest)
library(betareg)
library(coin)
library(rcompanion)
library(ggplot2)
library(MASS)
library(pls)
library(leaps)
library(plsdepot)
library(lars)
library(pscl)
permutacion_test <- independence_test(reacciones~tipo,data = dataset_gusanos)
permutation_test
permutacion_test <- independence_test(reacciones~tipo,data = dataset_gusanos)
permutacion_test
validation_dtI <- readRDS("D:/Users/Sara/Downloads/validation_dtI.rds")
summary(validation_dtI)
head(validation_dtI)
install.packages('systemPipeRdata')
install.packages('fgsea')
install.packages('ChIPseeker')
BiocManager::install("RNAseq123")
url <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE63310&format=file"
utils::download.file(url, destfile = "GSE63310_RAW.tar", mode = "wb")
utils::untar("GSE63310_RAW.tar", exdir = ".")
files_gz <- Sys.glob("GSM*txt.gz")
for(f in files_gz)
R.utils::gunzip(f, overwrite = TRUE)
BiocManager::install("R.utils")
url <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE63310&format=file"
utils::download.file(url, destfile = "GSE63310_RAW.tar", mode = "wb")
utils::untar("GSE63310_RAW.tar", exdir = ".")
files_gz <- Sys.glob("GSM*txt.gz")
for(f in files_gz)
R.utils::gunzip(f, overwrite = TRUE)
# Load the packages we will use.
library("limma")   # Linear models for differential expression
library("Glimma")  # Interactive plots for exploration
library("edgeR")   # Process count data from NGS experiments
library("Mus.musculus") # Gene annotations for the Mus musculus genome
BiocManager::install("Mus.musculus")
# Load the packages we will use.
library("limma")   # Linear models for differential expression
library("Glimma")  # Interactive plots for exploration
library("edgeR")   # Process count data from NGS experiments
library("Mus.musculus") # Gene annotations for the Mus musculus genome
BiocManager::install("Mus.musculus")
BiocManager::install("org.Mm.eg.db")
install.packages('Mus.musculus')
install.packages('ps')
BiocManager::install("ps")
library(GEOquery)
library('installr')
install.packages('installr')
require(installr)
updateR()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RNAseq123")
url <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE63310&format=file"
utils::download.file(url, destfile = "GSE63310_RAW.tar", mode = "wb")
utils::untar("GSE63310_RAW.tar", exdir = ".")
files_gz <- Sys.glob("GSM*txt.gz")
for(f in files_gz)
R.utils::gunzip(f, overwrite = TRUE)
runif(100)
order(runif(100))
library(rmarkdown)
sessionInfo()
devtools::install_github('rstudio/rmarkdown')
install.packages("prettydoc ")
install.packages("prettydoc")
library(prettydoc)
install.packages()
install.packages("rmdformats ")
install.packages("rmdformats")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("rmdformats")
getGEOSuppFiles("GSE123302")
library(GEOquery)
getGEOSuppFiles("GSE123302")
ADD <- getGEOSuppFiles("GSE123302")
head(ADD)
untar("GSE123302_RAW.tar", exdir = "data")
cels = list.files("data/", pattern = "cel")
install.packages("untar")
BiocManager::install("untar")
library(untar)
untar("GSE123302_RAW.tar", exdir = "data")
head(ADD)
setwd("D:/Users/Sara/Documents/2019-21 MÃ¡ster BioinformÃ¡tica/2020 Septiembre/Machine Learning/PEC 3/entrega")
# QSAR Models with DNA
require(DNAshapeR)
require(seqinr)
require(RBioinf)
library(rDNAse)
library(rjson)
# Load Data
# =====================================
## Load positive data
dirData = "D:/Users/Sara/Documents/2019-21 Máster Bioinformática/2021 Febrero/TFM/Programacion/Git/src/modelling_design"
setwd(dirData)
inFile = '../../data/trial2/data.csv'
outPositives = '../../data/trial2/peaks_positive.fa'
## Unify positive + negative cases in a fasta file
outUnified = '../../data/trial1/peaks_unified.fa'
# Load data from csv peaks+no-peaks
data = read.delim2(inFile, sep = ',', header = T)
lista = as.list(data$Sequence)
label = as.list(data$Label)
filtro = nchar(lista)>5
outUnified = '../../data/trial2/peaks_unified.fa'
write.fasta(lista[filtro], names = label[filtro], file.out = outUnified)
# Generate descriptors
# ===================================
# Generation of shape features and save them in fasta files
unified = getShape(outUnified)[1:4] # To obtain only the four functions: MGW, ProT, HelT, Roll
MGW <- data.frame()
for (i in seq_along(1:nrow(unified$MGW))){
histogram = hist(unified$MGW[i,],breaks = 200)
MGW = rbind(MGW, histogram$density)
}
MGW[1:5,1:5]
MGW[-1,-1]
MGW[5168:,1:5]
MGW[5168:5170,1:5]
MGW[1:5,5168:5170]
MGW[1:5,5168:5169]
MGW[1:5,225:227]
MGW_prueba = cbind(MGW,label[filtro])
MGW[1:5,225:227]
MGW_prueba[1:5,225:227]
length(label[filtro])
dim(unified$MGW)
# Load data from csv peaks+no-peaks
outUnified_pos = '../../data/trial1/peaks_unified_pos.fa'
outUnified_neg = '../../data/trial1/peaks_unified_neg.fa'
data = read.delim2(inFile, sep = ',', header = T)
data$Sequence[data$Label=="peak"]
data$Label[1:5]
data$Sequence[data$Label=="Peak"]
length(data$Sequence[data$Label=="No-peak"])
data$Label[880]
outUnified_pos = '../../data/trial1/peaks_unified_pos.fa'
outUnified_neg = '../../data/trial1/peaks_unified_neg.fa'
data = read.delim2(inFile, sep = ',', header = T)
lista_pos = as.list(data$Sequence[data$Label=="Peak"])
lista_neg = as.list(data$Sequence[data$Label=="Replicate"])
outUnified = '../../data/trial2/peaks_unified.fa'
write.fasta(lista_pos[nchar(lista_pos)>5], names = "Peak", file.out = outUnified_pos)
write.fasta(lista_neg[nchar(lista_neg)>5], names = "Replicate", file.out = outUnified_neg)
unified_pos = getShape(outUnified_pos)[1:4] # To obtain only the four functions: MGW, ProT, HelT, Roll
unified_neg = getShape(outUnified_neg)[1:4]
MGW_pos <- data.frame()
for (i in seq_along(1:nrow(unified_pos$MGW))){
histogram = hist(unified_pos$MGW[i,],breaks = 200)
MGW_pos = rbind(MGW_pos, histogram$density)
}
MGW_pos = cbind(MGW_pos,"Peak")
MGW_pos[1:5,268]
MGW_pos[1:5,260:268]
MGW_neg <- data.frame()
for (i in seq_along(1:nrow(unified_neg$MGW))){
histogram = hist(unified_neg$MGW[i,],breaks = 200)
MGW_neg = rbind(MGW_neg, histogram$density)
}
MGW_neg = cbind(MGW_neg,"Replicate")
unified = getShape(outUnified)[1:4]
dim(unified$MGW)
unified$MGW[1:5,1:5]
plotShape(unified$MGW)
plotShape(unified$MGW[1])
plotShape(unified$MGW[4])
dim(unified_pos)
dim(unified_pos$MGW)
length(lista_pos)
?`DNAshapeR-package`
plotShape(unified$MGW)
plotShape(unified_pos$MGW)
unified_pos$MGW[1,:]
unified_pos$MGW[1,]
hist(unified_pos$MGW[1,])
hist(unified_pos$MGW[,1])
unified_pos$MGW[,1]
unified_pos$MGW[1,]
unified_pos$MGW[2,]
unified_pos$MGW[3,2900:3034]
unified_pos$MGW[3,2800:3034]
unified_pos$MGW[3,2900:3034]
unified_pos$MGW[3,2700:3034]
dim(unified_pos$MGW)
unified_pos$MGW[,1]
dim(unified_pos$MGW)
lista_pos[345:348]
# Generate descriptors
# ===================================
# Generation of shape features and save them in fasta files
unified_pos = getShape(outUnified_pos)[1:4] # To obtain only the four functions: MGW, ProT, HelT, Roll
nified_pos = getShape(outUnified_pos)[1:4]
# Load data from csv peaks+no-peaks
outUnified_pos = '../../data/trial2/peaks_unified_pos.fa'
write.fasta(lista_pos[nchar(lista_pos)>5], names = "Peak", file.out = outUnified_pos)
# Generate descriptors
# ===================================
# Generation of shape features and save them in fasta files
unified_pos = getShape(outUnified_pos)[1:4] # To obtain only the four functions: MGW, ProT, HelT, Roll
edit(getShape)
edit(getShape)
sequence_list = c("CTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGA", "CTGACTGACTGACTGACTGACTGACTGACTGA")
sequence_list
write.fasta(sequence_list, names = "Peak", file.out = prueba)
write.fasta(sequence_list, names = "Peak", file.out = "prueba.fa")
prueba = getShape(prueba)
prueba = getShape("prueba.fa")
nchar(sequence_list[1])
nchar(sequence_list[2])
prueba$MGW
dim(prueba$MGW)
dim(prueba$HelT)
84+32
write.fasta(as.list(sequence_list), names = "Peak", file.out = "prueba.fa")
prueba = getShape("prueba.fa")
dim(prueba$MGW)
prueba = getShape("prueba.fa")
dim(prueba$MGW)
prueba = getShape("prueba.fa")
nchar(sequence_list[2])
nchar(sequence_list[1])
edit(getShape)
